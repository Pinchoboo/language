COMMENT    = _{ "/*" ~ (!"*/" ~ ANY)* ~ "*/" }
WHITESPACE = _{ " " | "\t" | "\r" | "\n" }

string = ${ "\"" ~ inner ~ "\"" }
inner = @{ (!"\"" ~ ANY)* }

alpha = _{ 'a'..'z' | 'A'..'Z' }
digit = _{ '0'..'9' }

integer = @{ ASCII_DIGIT+ }
float   = @{ ASCII_DIGIT+ ~ ("." ~ ASCII_DIGIT+)? }

number = { float | integer }

boolean = { true | false }
true    = { "true" }
false   = { "false" }

type      = { intType | floatType | boolType | charType | unitType | const? ~ mapType | structmapType }

const = {"const"}
intType   = { "int" }
floatType = { "float" }
boolType  = { "bool" }
charType  = { "char" }
unitType  = { "void" | "()" }
mapType = { "[" ~ type ~ "->" ~ type ~ "]" }
structmapType  = {"[" ~ identifier ~ "]"}

reserved        =  @{ (type | boolean | functionKeyword | whileKeyword | ifKeyword | elseKeyword | returnKeyword | createKeyword | freeKeyword | forKeyWord | inKeyWord) ~ WHITESPACE }
functionKeyword = _{ "fn" }
whileKeyword    = _{ "while" }
ifKeyword       = _{ "if" }
elseKeyword     = _{ "else" }
returnKeyword   = _{ "return" }
createKeyword   = _{ "new" }
freeKeyword 	= _{ "free" }
forKeyWord 		= _{ "for" }
inKeyWord 		= _{ "in" }

identifier = @{
    !(reserved) ~ (("_" |alpha) ~ (alpha | "_" | digit)*)
}

call = {
    identifier ~ "(" ~ (expression ~ ("," ~ expression)*)? ~ ")"
}

value = _{
    number	
  | boolean
  | "(" ~ expression ~ ")"
  | mapCall  
  | call
  | identifier
  | char
  | string
}

mapCall = {identifier ~ "." ~ call}

char = @{"'" ~ ANY ~ "'"}

atom  = _{ unop? ~ value }

expression = {
    atom ~ (binop ~ atom)*
}

binop = _{
    add
  | subtract
  | multiply
  | divide
  | modulo
  | or
  | and
  | xor
  | equal
  | notEqual
  | greaterEqual
  | smallerEqual
  | greater
  | smaller
}
add          = { "+" }
subtract     = { "-" }
multiply     = { "*" }
divide       = { "/" }
modulo       = { "%" }
or           = { "|" }
and          = { "&" }
xor          = { "^" }
equal        = { "==" }
notEqual     = { "!=" }
greater      = { ">" }
smaller      = { "<" }
greaterEqual = { "<=" }
smallerEqual = { ">=" }

unop = _{
    negate
  | invert
}
negate = { "-" }
invert = { "!" }

assignment = {
    type? ~ identifier ~ "=" ~ expression
}
creatableType = {mapType | structmapType}
creation = {
	createKeyword ~ creatableType ~ identifier
}

scope    = _{ "{" ~ block ~ "}" }
if       =  { ifKeyword ~ expression ~ scope ~ (elseKeyword ~ ifKeyword ~ expression ~ scope)* ~ (elseKeyword ~ scope)? }
while    =  { whileKeyword ~ expression ~ scope }
function =  { functionKeyword ~ type? ~ identifier ~ "(" ~ (type ~ identifier ~ ("," ~ type ~ identifier)*)? ~ ")" ~ scope }
for = {forKeyWord ~ identifier ~ "->" ~ identifier ~ inKeyWord ~ value ~ scope }
return = { (returnKeyword ~ expression) }
free = { (freeKeyword ~ identifier) }
/// no nested functions and nested scopes for now
block = {
    (for | if | while | assignment | creation | free | mapCall | call)* ~ return?
}

keyTypePair = {identifier ~ "->" ~ type}
structdef = {"[" ~ identifier ~ "]" ~ "=" ~ "[" ~ keyTypePair* ~ "]"}

program = {
    SOI ~ (function | structdef)* ~ (&EOI ~ ANY*)
}

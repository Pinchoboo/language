fn int main() {
	int iters = 45
	printChar('f') printChar('i') printChar('b') 
	println()
	int a = 1
	while a <= iters {
		printInt(a)
		printChar(':')
		printInt(fib(a))
		println()
		a=a+1
	}
	println()
	printChar('f') printChar('a') printChar('s') printChar('t')
	printChar(' ')
	printChar('f') printChar('i') printChar('b') 
	println()
	a = 1
	while a <= iters {
		printInt(a)
		printChar(':')
		printInt(fastfib(a))
		println()
		a=a+1
	}
	return 0

}

fn int fib(int n){
	if n < 3 {
		return 1
	}
	return fib(n-1) + fib(n-2)
}

fn int fastfib(int n){
	int a = 0
	int b = 1
	while n > 0 {
		a = a + b
		int c = b /*todo fix allocates new memory every iter*/
		b = a
		a = c
		n = n - 1
	}
	return b
}